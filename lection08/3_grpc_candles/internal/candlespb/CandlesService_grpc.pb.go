// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package candlespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CandlesServiceClient is the client API for CandlesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandlesServiceClient interface {
	Candles(ctx context.Context, in *CandleRequest, opts ...grpc.CallOption) (CandlesService_CandlesClient, error)
}

type candlesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandlesServiceClient(cc grpc.ClientConnInterface) CandlesServiceClient {
	return &candlesServiceClient{cc}
}

func (c *candlesServiceClient) Candles(ctx context.Context, in *CandleRequest, opts ...grpc.CallOption) (CandlesService_CandlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CandlesService_ServiceDesc.Streams[0], "/candles.CandlesService/Candles", opts...)
	if err != nil {
		return nil, err
	}
	x := &candlesServiceCandlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CandlesService_CandlesClient interface {
	Recv() (*CandleResponse, error)
	grpc.ClientStream
}

type candlesServiceCandlesClient struct {
	grpc.ClientStream
}

func (x *candlesServiceCandlesClient) Recv() (*CandleResponse, error) {
	m := new(CandleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CandlesServiceServer is the server API for CandlesService service.
// All implementations must embed UnimplementedCandlesServiceServer
// for forward compatibility
type CandlesServiceServer interface {
	Candles(*CandleRequest, CandlesService_CandlesServer) error
	mustEmbedUnimplementedCandlesServiceServer()
}

// UnimplementedCandlesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCandlesServiceServer struct {
}

func (UnimplementedCandlesServiceServer) Candles(*CandleRequest, CandlesService_CandlesServer) error {
	return status.Errorf(codes.Unimplemented, "method Candles not implemented")
}
func (UnimplementedCandlesServiceServer) mustEmbedUnimplementedCandlesServiceServer() {}

// UnsafeCandlesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandlesServiceServer will
// result in compilation errors.
type UnsafeCandlesServiceServer interface {
	mustEmbedUnimplementedCandlesServiceServer()
}

func RegisterCandlesServiceServer(s grpc.ServiceRegistrar, srv CandlesServiceServer) {
	s.RegisterService(&CandlesService_ServiceDesc, srv)
}

func _CandlesService_Candles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandlesServiceServer).Candles(m, &candlesServiceCandlesServer{stream})
}

type CandlesService_CandlesServer interface {
	Send(*CandleResponse) error
	grpc.ServerStream
}

type candlesServiceCandlesServer struct {
	grpc.ServerStream
}

func (x *candlesServiceCandlesServer) Send(m *CandleResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CandlesService_ServiceDesc is the grpc.ServiceDesc for CandlesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandlesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candles.CandlesService",
	HandlerType: (*CandlesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Candles",
			Handler:       _CandlesService_Candles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "3_grpc_candles/candlespb/CandlesService.proto",
}
