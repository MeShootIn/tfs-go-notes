package main

import (
	"fmt"
	"runtime"
	"time"
)

/*
* Конкурентность - разделение процессов выполнения функций на части и выполнение их вперемешку в одном потоке:
runtime.GOMAXPROCS(1)
* Параллелизм - функции выполняются в разных потоках: runtime.GOMAXPROCS(>=2)

* Кооперативная многозадачность - планировщик запускает задачи, которые сами знают, когда им остановиться или передать
управление планировщику для выполнения другой задачи
* Вытесняющая многозадачность - планировщик сам решает, когда остановить задачу
* В Go есть возможности для кооперативной и вытесняющей
*/

/*
ГОРУТИНЫ

* Самая главная горутина - main()
* При завершении родительской горутины сразу же завершаются и дочерние
*/

const n = 45

func main() {
	runtime.GOMAXPROCS(1) // Максимальное кол-во процессов, которые могут быть задействованы (по дефолт - кол-во
	// процессоров на компе)
	go spinner(500 * time.Millisecond)
	go func() {
		fibN := fib(n)
		fmt.Printf("\rFibonacci(%d) = %d\n", n, fibN)
	}()
	// В данном случае, ни одна горутина не будет выполнена, т.к. main успеет завершиться и весь процесс прервётся =>
	// нужны waitGroup'ы
}

func spinner(delay time.Duration) {
	for {
		for _, r := range `-\|/` {
			fmt.Printf("\r%c", r)
			time.Sleep(delay)
		}
	}
}

func fib(x int) int {
	if x < 2 {
		return x
	}
	return fib(x-1) + fib(x-2)
}
